// Voronoi.blink
// A test implementation of libNoise's Voronoi generator using Blink
// Ivan Busquets - August 2013

#define X_NOISE_GEN  1619
#define Y_NOISE_GEN  31337
#define Z_NOISE_GEN  6971
#define SEED_NOISE_GEN  1013
#define SQRT_3 1.73205081

inline int IntValueNoise3D (int x, int y, int z, int seed)
{
  // All constants are primes and must remain prime in order for this noise
  // function to work correctly.
  int n = (
      X_NOISE_GEN    * x
    + Y_NOISE_GEN    * y
    + Z_NOISE_GEN    * z
    + SEED_NOISE_GEN * seed)
    & 0x7fffffff;
  n = (n >> 13) ^ n;
  return (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;
}

inline float ValueNoise3D (int x, int y, int z, int seed)
{
  return 1.0 - ((float)IntValueNoise3D (x, y, z, seed) / 1073741824.0);
}

kernel Voronoi : ImageComputationKernel<ePixelWise>
{
  Image<eWrite, eAccessPoint> dst;

param:
  float2 offset;
  float frequency;
  int    seed;
  float displacement;
  bool distance;

local:
  int m_width;

  void define() {
    defineParam (distance, "Distance", true);
    defineParam(offset,      "Offset", float2(0.0f, 0.0f));
    defineParam(frequency, "Frequency",  3.0f);
    defineParam(displacement, "Displacement", 1.0f);
    defineParam(seed,        "Seed",   0);
  }

  void init() {

    m_width = dst.bounds.width(); 
}

  void process(int2 pos) {
    //float2 posf(pos.x, pos.y);
   float x = (pos.x - offset.x) * frequency / m_width;
   float y = (pos.y - offset.y) * frequency / m_width;
    int xInt = (x > 0.0? (int)x: (int)x - 1);
    int yInt = (y > 0.0? (int)y: (int)y - 1);


    float minDist = 2147483647.0;
    float xCandidate = 0;
    float yCandidate = 0;

    float dist;

for (int yCur = yInt - 2; yCur <= yInt + 2; yCur++) {
      for (int xCur = xInt - 2; xCur <= xInt + 2; xCur++) {

        // Calculate the position and distance to the seed point inside of
        // this unit cube.
        float xPos = xCur + ValueNoise3D (xCur, yCur, 0, seed    );
        float yPos = yCur + ValueNoise3D (xCur, yCur, 0, seed + 1);

        float xDist = xPos - x;
        float yDist = yPos - y;

        //dist = xDist * xDist + yDist * yDist;
        dist = fabs(xDist) + fabs(yDist);
        if (dist < minDist) {
          // This seed point is closer to any others found so far, so record
          // this seed point.
          minDist = dist;
          xCandidate = xPos;
          yCandidate = yPos;
	}
    }
}

float value = 0.0;
if (distance) {
    // Determine the distance to the nearest seed point.
    float xDist = xCandidate - x;
    float yDist = yCandidate - y;
    value = (sqrt (xDist * xDist + yDist * yDist)) * SQRT_3 - 1.0;
    }

value += (displacement * (float)ValueNoise3D ( 	    (int)(floor (xCandidate)), (int)(floor (yCandidate)), 0.0f, seed));

    SampleType(dst) sample(0.0f);

    sample.x = value;
    sample.y = value;
    sample.z = value;

    dst() = sample;
}
};
